# Radix Sort functions
def counting_sort_for_radix(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10
    
    for i in range(n):
        index = arr[i] // exp
        count[index % 10] += 1
    
    for i in range(1, 10):
        count[i] += count[i - 1]
    
    i = n - 1
    while i >= 0:
        index = arr[i] // exp
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
        i -= 1
    
    for i in range(n):
        arr[i] = output[i]

def radix_sort(arr):
    max_num = max(arr)
    exp = 1
    while max_num // exp > 0:
        counting_sort_for_radix(arr, exp)
        exp *= 10
    return arr

# Timing function
def test_radix_sort(arr):
    start = time.time()
    radix_sort(arr.copy())
    end = time.time()
    return end - start

# New arrays with slightly different sizes
arr4 = [random.randint(1, 4000) for _ in range(900)]
arr5 = [random.randint(1, 15000) for _ in range(9000)]

print("\nRadix Sort Performance:\n")
for i, arr in enumerate([arr4, arr5], start=4):
    t = test_radix_sort(arr)
    print(f"Array a{i}: {t:.6f} seconds")
